<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python函数返回值</title>
      <link href="/2020/04/09/python-han-shu-fan-hui-zhi/"/>
      <url>/2020/04/09/python-han-shu-fan-hui-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a><a href="https://baike.baidu.com/item/%E8%BF%94%E5%9B%9E%E5%80%BC/9629649?fr=aladdin" target="_blank" rel="noopener">函数返回值</a></h1><p>一个函数的函数名既是该函数的代表，也是一个变量。由于函数名变量通常用来把函数的处理结果数据返回给调用函数，即递归调用，所以一般把函数名变量称为返回值，函数的返回值类型是在定义函数时指定的。  </p><p><strong>函数可以有返回值，也可以没有返回值。</strong>  </p><p>函数的返回值是通过 <strong>return</strong> 实现的。  </p><pre><code>def test():    a = 100    return a       #通过return把函数里面a的值返回给函数，从而可以在下面进行对其他变量的赋值num = test()print(num)</code></pre><p>一个函数可以有多个返回值。  </p><p>函数获取多个返回值有下面四种方式：  </p><h4 id="1-直接获取："><a href="#1-直接获取：" class="headerlink" title="1. 直接获取："></a>1. 直接获取：</h4><pre><code>def test():    name = input(&quot;请输入姓名&quot;)    myId = input(&quot;请输入学号&quot;)    age = input(&quot;请输入年龄&quot;)    return name,myId,agerecvData = test()print(recvData)</code></pre><p><strong>获取结果：</strong>  </p><pre><code>F:\代码&gt;python3 ceshi.py请输入姓名xiaoming请输入学号100请输入年龄15(&#39;xiaoming&#39;, &#39;100&#39;, &#39;15&#39;)</code></pre><p>可见这种方式获取的结果直接是一个元组。  </p><h4 id="2-定义元组获取："><a href="#2-定义元组获取：" class="headerlink" title="2. 定义元组获取："></a>2. 定义元组获取：</h4><pre><code>def test():    name = input(&quot;请输入姓名&quot;)    myId = input(&quot;请输入学号&quot;)    age = input(&quot;请输入年龄&quot;)    info = (name,myId,age)    return inforecvData = test()print(recvData)</code></pre><p><strong>获取结果：</strong>  </p><pre><code>F:\代码&gt;python3 ceshi.py请输入姓名xiaoming请输入学号100请输入年龄15(&#39;xiaoming&#39;, &#39;100&#39;, &#39;15&#39;)</code></pre><p>可见和直接获取结果是一样的，得到一个元组。</p><h4 id="3-定义列表获取："><a href="#3-定义列表获取：" class="headerlink" title="3. 定义列表获取："></a>3. 定义列表获取：</h4><pre><code>def test():    name = input(&quot;请输入姓名&quot;)    myId = input(&quot;请输入学号&quot;)    age = input(&quot;请输入年龄&quot;)    info = [name,myId,age]    return inforecvData = test()print(recvData)</code></pre><p><strong>获取结果：</strong>  </p><pre><code>F:\代码&gt;python3 ceshi.py请输入姓名xiaoming请输入学号100请输入年龄15[&#39;xiaoming&#39;, &#39;100&#39;, &#39;15&#39;]</code></pre><p>这种方式结果获得的是一个列表。</p><h4 id="4-定义字典获取："><a href="#4-定义字典获取：" class="headerlink" title="4. 定义字典获取："></a>4. 定义字典获取：</h4><pre><code>def test():    name = input(&quot;请输入姓名&quot;)    myId = input(&quot;请输入学号&quot;)    age = input(&quot;请输入年龄&quot;)    info = {&quot;name&quot;:name,&quot;id&quot;:myId,&quot;age&quot;:age}    return inforecvData = test()print(recvData)</code></pre><p><strong>获取结果：</strong>  </p><pre><code>F:\代码&gt;python3 ceshi.py请输入姓名xiaoming请输入学号100请输入年龄15{&#39;name&#39;: &#39;xiaoming&#39;, &#39;id&#39;: &#39;100&#39;, &#39;age&#39;: &#39;15&#39;}</code></pre><p>这种方式获取的结果最一目了然，但是在写的过程中也是最麻烦。 </p><h3 id="在函数外面获取的方式："><a href="#在函数外面获取的方式：" class="headerlink" title="在函数外面获取的方式："></a>在函数外面获取的方式：</h3><p>可以直接获取（元组，列表）：  </p><pre><code>def test():    name = input(&quot;请输入姓名&quot;)    myId = input(&quot;请输入学号&quot;)    age = input(&quot;请输入年龄&quot;)    return name,myId,agea,b,c = test()print(a)print(b)print(c)</code></pre><p>结果：  </p><pre><code>F:\代码&gt;python3 ceshi.py请输入姓名xiaoming请输入学号100请输入年龄15xiaoming10015</code></pre><p>通过函数调用：  </p><pre><code>def test():    name = input(&quot;请输入姓名&quot;)    myId = input(&quot;请输入学号&quot;)    age = input(&quot;请输入年龄&quot;)    info = {&quot;name&quot;:name,&quot;id&quot;:myId,&quot;age&quot;:age}    return infotemp = test()print(temp.get(&quot;name&quot;))print(temp.get(&quot;id&quot;))print(temp.get(&quot;age&quot;))</code></pre><p>结果：  </p><pre><code>F:\代码&gt;python3 ceshi.py请输入姓名xiaoming请输入学号100请输入年龄15xiaoming10015</code></pre><p>这种方式可以随便获取，不用按照一定的顺序。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><p>这四种方式第一种最简单，的确是优点，但是对于写的程序而言，其中的关联性越弱，到后期维护修改难度越小，而第四种方式的字典可以根据key值来获取value值，是关联性最小的一种方式，非常推荐用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python实例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python局部变量和全局变量</title>
      <link href="/2020/04/05/python-ju-bu-bian-liang-he-quan-ju-bian-liang/"/>
      <url>/2020/04/05/python-ju-bu-bian-liang-he-quan-ju-bian-liang/</url>
      
        <content type="html"><![CDATA[<h1 id="python中变量包括局部变量和全局变量"><a href="#python中变量包括局部变量和全局变量" class="headerlink" title="python中变量包括局部变量和全局变量"></a>python中变量包括局部变量和全局变量</h1><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a><a href="https://baike.baidu.com/item/%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/9844788?fr=aladdin" target="_blank" rel="noopener">局部变量</a></h2><p>在函数里面定义的变量，就叫做局部变量。<br>它只能在定义它的函数中有效，出了这个函数它就没有了作用，形参也是局部变量。  </p><pre><code>#encoding=utf-8import timedef test1():    num = 100    print(num)def test2():    num = 200    print(num)    time.sleep(1)    num = num + 100    print(num)def test3():    print(num)test1()test2()test3()</code></pre><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a><a href="https://baike.baidu.com/item/%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/4725296?fr=aladdin" target="_blank" rel="noopener">全局变量</a></h2><p>在函数外面定义的变量就叫做全局变量。<br>如果在函数中直接修改全局变量会产生异常，如果真的需要修改，那么可以在函数中进行声明。</p><pre><code>#encoding=utf-8num = 100def test1():    global num   #global就是全局声明，global需要在函数内部声明，若在函数外声明，则函数依然无法操作    print(num)    num += 2    print(num)def test2():    print(num)test1()test2()</code></pre><h1 id="除此之外"><a href="#除此之外" class="headerlink" title="除此之外"></a>除此之外</h1><pre><code>#g_a = 100 #为了和局部变量区别，一般在全局变量前面加上g_a = 200def test():    print(&quot;---------&quot;)    #a += 1 #这种方式是直接修改    a = 100 #这种方式可能是定义也可能是修改，因为全局变量a在这里不能修改，所以此处是定义a。如果一个全局变量和一个局部变量的名字相同的话，那么用的是局部变量。    print(a)test()</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>全局变量和局部变量各有其优缺点，不能一概而论；在python中，函数和其它语言一样，也可以进行全局变量的修改，但是为了提升安全性，引入了global的用法，加了global，则可以在函数内部对函数外的对象进行操作了，也可以改变它的值了,global需要在函数内部声明，若在函数外声明，则函数依然无法操作。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python实例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python函数参数</title>
      <link href="/2020/03/29/python-han-shu-can-shu/"/>
      <url>/2020/03/29/python-han-shu-can-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="python函数可定义参数"><a href="#python函数可定义参数" class="headerlink" title="python函数可定义参数"></a>python函数可定义参数</h1><p>参数定义方式如下：</p><pre><code>#定义一个函数def add2num():    sun = 11 + 22    print(&quot;sum=%d&quot;%sum)#如果在定义函数的时候，在小括号中如果有变量，那么也就意味着这个函数在调用的时候需要传递数据def add2num_2(num1,num2):   #在定义函数时，小括号中的变量就是形参（只是一种形式，实际的作用是用来接收传递过来的数据）    #sum = num1 + num2    #print(&quot;%d+%d=%d&quot;%(num1,num2,sum))    print(&quot;%d+%d=%d&quot;(num1,num2,num1+num2))   #如果后面用不到可直接把计算公式写出来#如果调用的这个函数在定义的时候有多个变量（在小括号内）那么就必须要传递数据add2num_2(100,200)   #这里面的100，200就是实参（实际传递的参数，实际传递的数据）#如果定义的函数需要两个参数，而调用的时候没有给出数据，或者给出太多数据都会造成程序异常</code></pre><h5 id="通过这个例子可以简单地了解函数参数以及形参和实参的含义"><a href="#通过这个例子可以简单地了解函数参数以及形参和实参的含义" class="headerlink" title="通过这个例子可以简单地了解函数参数以及形参和实参的含义"></a>通过这个例子可以简单地了解函数参数以及形参和实参的含义</h5><p>除此之外，可以把函数运用的更加灵活一点  </p><pre><code>#定义一个函数def add2num(a,b):   #里面的形参虽然填a,b也可以，但是为了可读性，尽量填下面用到的变量名sum1,sum2    sum = a + b    print(&quot;sum=%d&quot;%sum)#1.从用户获取两个数据num1 = int(input(&quot;请输入第一个数字：&quot;))num2 = int(input(&quot;请输入第二个数字：&quot;))   #因为获取的数据是字符串，无法直接完成数学运算，可直接在这里定义int类型#2.调用函数，并且传递过去，就能完成函数的运行add2num(num1,num2)</code></pre><p>在定义形参和实参的时候，一般是按照先后顺序一一对应的，但是可以通过括号内加“=”来完成乱序赋值  </p><pre><code>def add2num(a,b):    sum = a+b    print(&quot;%d+%d=%d&quot;%(a,b,sum))add2num(b=200,a=100)   #如果在调用时，写的参数的顺序和定义的时候接受的形参的顺序不一致，可以在传递的时候指定给形参</code></pre><h1 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h1><p>通过“return”来吧函数的结果保存  </p><pre><code>def add3num(a,b,c):    sum = a + b + c    return sum   #此时return的作用是把后面的这个变量的结果返回，即把sum的结果返回去，也就是给别人#如果一个函数有return，那么意味着这个函数有返回值，此时就是sum的结果，如果函数没有return，意味着没有返回值。#如果一个函数有return，即有返回值，往往在调用的地方需要一个变量来接收保存这个返回值result = add3num(1,2,3)   #返回之后的结果就相当于 result = 6print(&quot;%d&quot;%sum)</code></pre><h1 id="自定义函数传参数"><a href="#自定义函数传参数" class="headerlink" title="自定义函数传参数"></a>自定义函数传参数</h1><pre><code>def test(numsTemp):   #需要向函数传参数的话，函数这里必须要有一个接收的变量一般xxxTemp    numsTemp.append(44)nums = [11,22,33]test(nums)   #这里调用这个函数，如果要向里面传参数，就要把要传的参数写进去，相应的定义函数的地方就要有接收的变量</code></pre><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>在python中，值是靠引⽤来传递来的。  </p><p>我们可以用id()来判断两个变量是否为同一个值的引用。我们可以将id值理解为那块内存的地址标示。  </p><h4 id="分为可变类型和不可变类型"><a href="#分为可变类型和不可变类型" class="headerlink" title="分为可变类型和不可变类型"></a>分为可变类型和不可变类型</h4><p>可变类型，值可以改变：<br>列表 list<br>字典 dict  </p><p>不可变类型，值不可以改变：<br>数值类型 int,long,bool,float<br>字符串 str<br>元组 tuple  </p><h2 id="会出现以下情况"><a href="#会出现以下情况" class="headerlink" title="会出现以下情况"></a>会出现以下情况</h2><pre><code>def test1(numsTemp):    print(id(numsTemp))    numsTemp.append(44)    print(id(numsTemp))def test2(aTemp):    print(id(aTemp))    aTemp += 1    print(id(aTemp))nums = [11,22,33]test1(nums)print(&quot;-&quot;*20)print(id(nums))print(nums)print(&quot;*&quot;*30)a = 100test2(a)print(&quot;-&quot;*20)print(id(a))print(a)</code></pre><p>输出结果如下：  </p><pre><code>13268286937601326828693760--------------------1326828693760[11, 22, 33, 44]******************************140733936296704140733936296736--------------------140733936296704100</code></pre><p>可以看出上面的nums是列表属于可变类型，而a属于不可变类型，从而产生区别。  </p><p>可变类型在进行数值更改时，相当于地址不变，在原地址直接进行修改，而不可变类型进行数值修改时，相当于在不同地址贴标签，当数值发生改变时，原地址的数值不发生改变，而在其他地址找到符合的数值把“标签”贴上去。  </p><p><strong>如果全局变量是可变类型：即列表或者字典，那么就可以在函数中直接进行修改；而不可变类型，比如int，是不能直接在函数中修改的，需要加global声明。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> python实例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python随机分配实例</title>
      <link href="/2020/03/28/python-sui-ji-fen-pei-shi-li/"/>
      <url>/2020/03/28/python-sui-ji-fen-pei-shi-li/</url>
      
        <content type="html"><![CDATA[<p>python是一门简便的编程语言，可以用简短的代码实现其他编程语言冗长的过程。  </p><h3 id="通过以下随机分配老师进办公室的实例可以看出来。"><a href="#通过以下随机分配老师进办公室的实例可以看出来。" class="headerlink" title="通过以下随机分配老师进办公室的实例可以看出来。"></a>通过以下随机分配老师进办公室的实例可以看出来。</h3><pre><code>#encoding=utf-8import random#定义一个列表，表示三个空办公室offices = [[],[],[]]#定义一个列表，用来存储八位老师的信息teachers = [&#39;张三&#39;,&#39;李四&#39;,&#39;王五&#39;,&#39;赵六&#39;,&#39;韩七&#39;,&#39;刘八&#39;,&#39;秦一&#39;,&#39;田九&#39;,&#39;孙二&#39;]#通过循环的方式把8位老师随机分配到3个办公室，然后把老师添加进去for name in teachers:    index = random.randint(0,2)    offices[index].append(name)#输出每个办公室里面老师的信息i = 1for room in offices:    print(&#39;办公室%d-----&#39;%i)    for teacherName in room:            print(teacherName)    i += 1</code></pre><h3 id="运行了两次，实现的效果如下"><a href="#运行了两次，实现的效果如下" class="headerlink" title="运行了两次，实现的效果如下"></a>运行了两次，实现的效果如下</h3><pre><code>lucid@lucid:~$ python 000.py办公室1-----李四赵六田九办公室2-----张三刘八孙二办公室3-----王五韩七秦一lucid@lucid:~$ python 000.py办公室1-----张三赵六孙二办公室2-----李四王五韩七刘八办公室3-----秦一田九</code></pre><p>可见，实现了随机安排的效果。  </p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><p>编程思想还是和日常的思维方式有区别的，以正常的思维刚开始，没想到直接取出老师安排进随机的办公室里面，我想着就按照日常的想法随机安排办公室随机安排教师，这么想了之后我发现实施下来很难，而以这种方式就可以很方便的实现简单的随机，以后再加限制条件就相对简单了。所以，编程思想还是要好好培养的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python实例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Github</title>
      <link href="/2020/03/25/hello-github/"/>
      <url>/2020/03/25/hello-github/</url>
      
        <content type="html"><![CDATA[<p>GitHub是通过Git进行版本控制的软件源代码托管服务平台，由GitHub公司（曾称Logical Awesome）的开发者Chris Wanstrath、PJ Hyett和Tom Preston-Werner使用Ruby on Rails编写而成。 </p><h1 id="Github发展"><a href="#Github发展" class="headerlink" title="Github发展"></a><a href="https://github.com/" target="_blank" rel="noopener">Github</a>发展</h1><p>GitHub平台于2007年10月1日开始开发。<br>2008年2月以beta版本开始上线，4月份正式上线.<br>2019年1月7日，GitHub宣布免费用户也可以创建私有仓库，私有仓库数量不限但每个仓库最多指定三个合作者。</p><h1 id="网站统计"><a href="#网站统计" class="headerlink" title="网站统计"></a>网站统计</h1><p>GitHub于2008年2月运行。<br>在2009年2月24日通过雅虎进行的一次采访中，GitHub队伍成员们宣布在GitHub运行的第一年，有共计46,000个公共版本库，它们中有17,000个是于最近一个月内创建的。当时，大概有6,200个版本库被派生（fork）至少一次，有4,600被合并。<br>在另一个在2009年6月27日通过雅虎的采访中，Tom Preston-Werner宣布版本库数量已经提升到了90,000唯一性公共版本库，有12,000个版本库被派生（fork）至少一次，总共有135,000个版本库。<br>在2010年6月，GitHub宣布它现在已经可提供1百万项目，它们中的60%是完整的版本库，但仍然有40%是“gist”或代码片段。2011年4月，GitHub宣称存放的代码库数量已达到2百万个。2013年4月，GitHub用户数达到350万，代码库数量达到6百万个。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/11/hello-world/"/>
      <url>/2020/03/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
